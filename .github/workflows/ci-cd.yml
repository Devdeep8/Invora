name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Testing and Quality Checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: invora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/invora_test
        AUTH_SECRET: ${{ secrets.AUTH_SECRET || 'test-secret-key-for-github-actions' }}
        EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST || 'test.com' }}
        EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT || '587' }}
        EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER || 'test@example.com' }}
        EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD || 'testpass' }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM || 'test@example.com' }}
      run: |
        # Setup Prisma for testing
        npx prisma generate
        npx prisma db push

    - name: Run ESLint
      run: npm run lint

    - name: Check code formatting
      run: npm run prettier:check

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/invora_test
        AUTH_SECRET: test-secret-key-for-github-actions
        EMAIL_SERVER_HOST: test.com
        EMAIL_SERVER_PORT: 587
        EMAIL_SERVER_USER: test@example.com
        EMAIL_SERVER_PASSWORD: testpass
        EMAIL_FROM: test@example.com
      run: npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/invora_test
        AUTH_SECRET: test-secret-key-for-github-actions
        EMAIL_SERVER_HOST: test.com
        EMAIL_SERVER_PORT: 587
        EMAIL_SERVER_USER: test@example.com
        EMAIL_SERVER_PASSWORD: testpass
        EMAIL_FROM: test@example.com
      run: npm run build

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        AUTH_SECRET: ${{ secrets.STAGING_AUTH_SECRET }}
        EMAIL_SERVER_HOST: ${{ secrets.STAGING_EMAIL_SERVER_HOST }}
        EMAIL_SERVER_PORT: ${{ secrets.STAGING_EMAIL_SERVER_PORT }}
        EMAIL_SERVER_USER: ${{ secrets.STAGING_EMAIL_SERVER_USER }}
        EMAIL_SERVER_PASSWORD: ${{ secrets.STAGING_EMAIL_SERVER_PASSWORD }}
        EMAIL_FROM: ${{ secrets.STAGING_EMAIL_FROM }}
      run: npm run build

    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prebuilt'
        alias-domains: staging-invora.vercel.app

  # Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run final pre-deployment checks
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST }}
        EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
        EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER }}
        EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      run: npm run pre-deploy

    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prebuilt --prod'

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        # Add your notification logic here (Slack, Discord, Email, etc.)
        
    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        # Add your notification logic here (Slack, Discord, Email, etc.)